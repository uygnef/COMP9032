
AVRASM ver. 2.2.6  C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm Fri Oct 21 18:35:34 2016

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m2560def.inc'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(1): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\macros.asm'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(171): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\caculate.asm'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(172): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\controll.asm'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(173): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\lcd.asm'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(174): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\keypad.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.0.106\avrasm\inc\m2560def.inc'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(1): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\macros.asm'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(171): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\caculate.asm'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(172): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\controll.asm'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(173): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\lcd.asm'
C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\main.asm(174): Including file 'C:\Users\uygne\Documents\GitHub\COMP9032\project1\project1\keypad.asm'
                                 
                                 .include "macros.asm"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 ;store all macros
                                 .macro st2				;-----store 2 bytes in data memory-------;
                                 	ldi r31, high(@2)
                                 	ldi r30, low(@2)
                                 	st z+, @0			; st2 register1 ==> data memory1
                                 	st z, @1			;	  register2 ==> data memory2
                                 .endmacro
                                 
                                 .macro ld2				;-----load 2 bytes from data memory to 2 register
                                 	ldi r31, high(@0)
                                 	ldi r30, low(@0)	;	data memory => register1, register2
                                 	ld @1, z+
                                 	ld @2, z
                                 .endmacro
                                 
                                 .macro STORE
                                 .if @0 > 63
                                 sts @0, @1
                                 .else
                                 out @0, @1
                                 .endif
                                 .endmacro
                                 
                                 .macro LOAD
                                 .if @1 > 63
                                 lds @0, @1
                                 .else
                                 in @0, @1
                                 .endif
                                 .endmacro
                                 
                                 .macro do_lcd_command
                                 	ldi r16, @0
                                 	rcall lcd_command
                                 	rcall lcd_wait
                                 .endmacro
                                 .macro do_lcd_data
                                 	ldi r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro do_lcd_data_reg
                                 	mov r16, @0
                                 	rcall lcd_data
                                 	rcall lcd_wait
                                 .endmacro
                                 
                                 .macro lcd_set
                                 	sbi LCD_CTRL_PORT, @0
                                 .endmacro
                                 .macro lcd_clr
                                 	cbi LCD_CTRL_PORT, @0
                                 .endmacro
                                 
                                 .macro lcd_start
                                 	ldi r16, low(RAMEND)
                                 	out SPL, r16
                                 	ldi r16, high(RAMEND)
                                 	out SPH, r16
                                 
                                 	ser r16
                                 	STORE LCD_DATA_DDR, r16
                                 	STORE LCD_CTRL_DDR, r16
                                 	clr r16
                                 	STORE LCD_DATA_PORT, r16
                                 	STORE LCD_CTRL_PORT, r16
                                 
                                 	do_lcd_command 0b00111000 ; 2x5x7
                                 	rcall sleep_5ms
                                 	do_lcd_command 0b00111000 ; 2x5x7
                                 	rcall sleep_1ms
                                 	do_lcd_command 0b00111000 ; 2x5x7
                                 	do_lcd_command 0b00111000 ; 2x5x7
                                 	do_lcd_command 0b00001000 ; display off
                                 	do_lcd_command 0b00000001 ; clear display
                                 	do_lcd_command 0b00000110 ; increment, no display shift
                                 	do_lcd_command 0b00001110 ; Cursor on, bar, no blink
                                 .endmacro	
                                 
                                 .macro first_line
                                 	do_lcd_command 0b00000001
                                 	do_lcd_data ' '
                                 	do_lcd_data ' '
                                 	do_lcd_data ' '
                                 	do_lcd_data 'P'
                                 	do_lcd_data 'O'
                                 	do_lcd_data 'S'
                                 	do_lcd_data ' '
                                 	do_lcd_data ' '
                                 	do_lcd_data ' '
                                 	do_lcd_data 'D'
                                 	do_lcd_data 'I'
                                 	do_lcd_data 'R'
                                 	do_lcd_data ' '
                                 	do_lcd_data 'S'
                                 	do_lcd_data 'P'
                                 	do_lcd_data 'D'
                                 	do_lcd_command 0b11000000
                                 .endmacro
                                 
                                 .macro	display_position		;use to display position on LCD
                                 	ld2 @0, temp1, temp2
                                 	clr ten
                                 	clr one
                                 	clr hundred
                                 	
                                 	start_convert:
                                 		cpi temp1, 0
                                 		brne convert_100
                                 		cpi temp2, 100
                                 		brsh convert_100
                                 		cpi temp2, 10
                                 		brsh convert_10
                                 		cpi temp2, 0 
                                 		brne convert_1
                                 		jmp convert_end
                                 
                                 	convert_100:
                                 		subi temp2, 100 
                                 		sbci temp1, 0
                                 		inc hundred
                                 		jmp start_convert
                                 	convert_10:
                                 		subi temp2, 10
                                 		inc ten
                                 		jmp start_convert
                                 	convert_1:
                                 		dec temp2
                                 		inc one
                                 		jmp start_convert
                                 	
                                 	convert_end:
                                 		subi hundred, -'0'
                                 		subi ten, -'0'
                                 		subi one, -'0'
                                 		do_lcd_data_reg hundred
                                 		do_lcd_data_reg ten
                                 .endmacro
                                 
                                 
                                 .macro	display_time		;use to display position on LCD
                                 	clr ten
                                 	clr one
                                 	clr hundred
                                 	
                                 	start_convert:
                                 		cpi @0, 100
                                 		brsh convert_100
                                 		cpi @0, 10
                                 		brsh convert_10
                                 		cpi @0, 0 
                                 		brne convert_1
                                 		jmp convert_end
                                 
                                 	convert_100:
                                 		subi @0, 100 
                                 		inc hundred
                                 		jmp start_convert
                                 	convert_10:
                                 		subi @0, 10
                                 		inc ten
                                 		jmp start_convert
                                 	convert_1:
                                 		dec @0
                                 		inc one
                                 		jmp start_convert
                                 	
                                 	convert_end:
                                 		subi hundred, -'0'
                                 		subi ten, -'0'
                                 		subi one, -'0'
                                 		do_lcd_data_reg hundred
                                 		do_lcd_data_reg ten
                                 .endmacro	
                                 
                                 .macro choose_modle
                                 	do_lcd_data 'S'
                                 	do_lcd_data 'T'
                                 	do_lcd_data 'A'
                                 	do_lcd_data 'R'
                                 	do_lcd_data 'T'
                                 	do_lcd_data ':'
                                 	do_lcd_data '('
                                 	do_lcd_data 'M'
                                 	do_lcd_data ')'
                                 .endmacro
                                 
                                 
                                 ;------------init lcd commond----------;
                                 .equ LCD_CTRL_PORT = PORTA
                                 .equ LCD_CTRL_DDR = DDRA
                                 .equ LCD_RS = 7
                                 .equ LCD_E = 6
                                 .equ LCD_RW = 5
                                 .equ LCD_BE = 4
                                 
                                 .equ LCD_DATA_PORT = PORTF
                                 .equ LCD_DATA_DDR = DDRF
                                 .equ LCD_DATA_PIN = PINF
                                 
                                 .equ PATTERN=0b11110000
                                 ;------------init keypad comoind-------;
                                 .def row    =r16		; current row number
                                 .def col    =r17		; current column number
                                 .def rmask  =r18		; mask for current row
                                 .def cmask	=r19		; mask for current column
                                 .def temp1	=r20		
                                 .def temp2  =r21
                                 .def temp3  =r22
                                 
                                 .equ PORTFDIR =0xF0			; use PortD for input/output from keypad: PF7-4, output, PF3-0, input
                                 .equ INITCOLMASK = 0xEF		; scan from the leftmost column, the value to mask output
                                 .equ INITROWMASK = 0x01		; scan from the bottom row
                                 .equ ROWMASK  =0x0F			; low four bits are output from the keypad. This value mask the high 4 bits.
                                 
                                 ;---------poistion register-----;
                                 .def one = r23
                                 .def ten = r24
                                 .def hundred = r25
                                 .dseg	
000200                           speed: .byte 1				;speed 1 bytes, 1 - 10 m/s
000201                           distance: .byte 2			;		   _________________________________
000203                           direction: .byte 1			;direction |_0_|_0_|_?_|_?_|_0_|_0_|_?_|_?_|
000204                           conduct: .byte 1			;			4 hight bit: 0000xxxx->down 0001xxxx->keep 0010xxxx->up
000205                           pos_X: .byte 2				;						    4 low bit:: xxxx0000->West, xxxx0001->North,							;									  xxxx0010->East, xxxx0011->South 
000207                           pos_Y: .byte 2				;position x,y	2 bytes, 0 ~ 500 ==> 0 ~ 50.0 meter
000209                           pos_Z: .byte 2				;         z		2 bytes, 0 ~ 100 ==> 0 ~ 10.0 meter
                                 
00020b                           dst_x: .byte 2				; destination of the helicopter
00020d                           dst_y: .byte 2
00020f                           dst_z: .byte 2
                                 
000211                           temp_dst: .byte 1
                                 
000212                           display_counter: .byte 1		;
000213                           duration: .byte 1
000214                           show_distance:	.byte 2
000216                           TempCounter: .byte 1 ;count for one second
000217                           speed_flag: .byte 1
000218                           take_off_flag: .byte 1 ; 0 means did not take off now, 1 means have taken off
000219                           hover_speed: .byte 1 ; store speed before hover(in order to recover privious status)
00021a                           landing_flag: .byte 1 ; to distinguish crash or landing
00021b                           key_button: .byte 1; make sure only press one button once
00021c                           auto_poilt_flag: .byte 1 ;judge if it in autopoilt model
                                 .cseg
                                 .org 0
000000 940c 0033                 	jmp reset
                                 .org int0addr
000002 940c 0242                 	jmp speed_up
                                 .org int1addr
000004 940c 0253                 	jmp speed_down
                                 .org OVF0addr 
00002e 940c 00b7                 	jmp Timer0OVF ; Jump to the interrupt handler for Timer0 overflow.
000030 940c 0032                 	jmp DEFAULT ; default service for all other interrupts.
000032 9518                      DEFAULT: reti 
                                 
                                 RESET:
000033 94f8                      	cli
000034 ef4f                      	ser temp1		
000035 b947                      	out DDRC, temp1
                                 	
000036 e040                      	ldi temp1, high(250)			;
000037 ef5a                      	ldi temp2, low(250)				;			x = 0:250
000038 e0f2
000039 e0e7
00003a 9341
00003b 8350                      	st2 temp1, temp2, pos_y			;			z = 0
00003c e0f2
00003d e0e5
00003e 9341
00003f 8350                      	st2 temp1, temp2, pos_x			;			y = 0:250
000040 2744                      	clr temp1
000041 2755                      	clr temp2
000042 e0f2
000043 e0e9
000044 9341
000045 8350                      	st2 temp1, temp2, pos_z			;			speed = 0
000046 e0f2
000047 e0e1
000048 9341
000049 8340                      	st2 temp1, temp1, distance
00004a 9340 0212                 	sts display_counter, temp1
00004c 9340 0200                 	sts speed, temp1				;------------------------------------------------
00004e 9340 0213                 	sts duration, temp1
000050 9340 021a                 	sts landing_flag, temp1
000052 9340 021b                 	sts key_button, temp1
000054 9340 021c                 	sts auto_poilt_flag, temp1
                                 
000056 9340 0219                 	sts hover_speed, temp1
000058 9340 0218                 	sts take_off_flag, temp1
00005a e041                      	ldi temp1, high(400)			; destination
00005b e950                      	ldi temp2, low(400)
00005c e0f2
00005d e0eb
00005e 9341
00005f 8350                      	st2 temp1, temp2, dst_x
000060 e0f2
000061 e0ed
000062 9341
000063 8350                      	st2 temp1, temp2, dst_y
000064 2744                      	clr temp1
000065 e550                      	ldi temp2, 80
000066 e0f2
000067 e0ef
000068 9341
000069 8350                      	st2 temp1, temp2, dst_z			
                                 
00006a e041                      	ldi temp1, 1
00006b 9340 0217                 	sts speed_flag, temp1
00006d e140                      	ldi temp1, 0b00010000
00006e 9340 0203                 	sts direction, temp1			;initialized direction, position x y z and speed.
                                 	
                                 	;-------------init interrput 0 and 1 (for adjust speed)--------
000070 e04a                      	ldi temp1, (2<<ISC10)|(2<<ISC00); set INT0 as falling edge triggered interrupt
000071 9340 0069                 	sts EICRA, temp1
000073 e043                      	ldi temp1, (1<<INT0)|(1<<INT1)
000074 bb4d                      	out EIMSK, temp1
                                 	;---------start lcd----------;
000075 ef0f
000076 bf0d
000077 e201
000078 bf0e
000079 ef0f
00007a bb00
00007b b901
00007c 2700
00007d bb01
00007e b902
00007f e308
000080 d292
000081 d2a1
000082 d2ba
000083 e308
000084 d28e
000085 d29d
000086 d2ad
000087 e308
000088 d28a
000089 d299
00008a e308
00008b d287
00008c d296
00008d e008
00008e d284
00008f d293
000090 e001
000091 d281
000092 d290
000093 e006
000094 d27e
000095 d28d
000096 e00e
000097 d27b
000098 d28a                      	lcd_start
000099 e503
00009a d27f
00009b d287
00009c e504
00009d d27c
00009e d284
00009f e401
0000a0 d279
0000a1 d281
0000a2 e502
0000a3 d276
0000a4 d27e
0000a5 e504
0000a6 d273
0000a7 d27b
0000a8 e30a
0000a9 d270
0000aa d278
0000ab e208
0000ac d26d
0000ad d275
0000ae e40d
0000af d26a
0000b0 d272
0000b1 e209
0000b2 d267
0000b3 d26f                      	choose_modle
0000b4 d25a                      	rcall start_moodle
0000b5 9478                      	sei
0000b6 c020                      	rjmp main
                                 
                                 Timer0OVF: ; interrupt subroutine to Timer0
                                 ;---------intrrput every 0.1 second--------------------
0000b7 94f8                      	cli
0000b8 b74f                      	in temp1, SREG
0000b9 934f                      	push temp1
0000ba d2d7                      	rcall run_follow_keypad_conduct
0000bb 9180 0216                 	lds r24, TempCounter
0000bd 9583                      	inc r24
0000be 3684                      	cpi r24, 100 ; Check if 100 times
0000bf 938f                      	push r24
0000c0 f479                      	brne NotSecond
                                 	; update all data
0000c1 e041                      	ldi temp1, 1
0000c2 9340 0217                 	sts speed_flag, temp1
0000c4 9140 0213                 	lds temp1, duration
0000c6 9543                      	inc temp1
0000c7 9340 0213                 	sts duration, temp1
                                 	
0000c9 d1f7                      	rcall go_dst_start
                                 	
0000ca d01b                      	rcall update_position
                                 	
0000cb 918f                      	pop r24
0000cc 2744                      	clr temp1
0000cd 9340 0216                 	sts TempCounter, temp1	
0000cf c003                      	rjmp EndIF
                                 NotSecond:
0000d0 918f                      	pop r24
0000d1 9380 0216                 	sts TempCounter,r24
                                 EndIF:
0000d3 914f                      	pop temp1
0000d4 bf4f                      	out SREG, temp1
                                 	
0000d5 9478                      	sei
0000d6 9518                      	reti
                                 
                                 main:
0000d7 2744                      	clr temp1
0000d8 9340 0216                 	sts TempCounter, temp1 ; Initialize the temporary counter to 0
0000da e040                      	ldi temp1, 0b00000000
0000db bd44                      	out TCCR0A, temp1
0000dc e043                      	ldi temp1, 0b00000011
0000dd bd45                      	out TCCR0B, temp1 ; Prescaling value=64
0000de e041                      	ldi temp1, 1<<TOIE0 ; =1024 microseconds
0000df 9340 006e                 	sts TIMSK0, temp1 ; T/C0 interrupt enable
                                 	
0000e1 9478                      	sei ; Enable global interrupt
                                 loop: 
0000e2 9478                      	sei
0000e3 cffe                      	rjmp loop
                                 
                                 
                                 
                                 .include "caculate.asm"
                                 
                                 /*if speed == 0:
                                 	return
                                 if direction == 'N':
                                 	postion_y ++
                                 elif direction == 'S':
                                 	.
                                 	.
                                 	.
                                 if x,y>50 | z,x,y<0 | z>10:
                                 	return crash*/
                                 
                                 jmp_help:
0000e4 940c 0180                 	jmp update_done
                                 update_position:
0000e6 9140 0200                 	lds temp1, speed
0000e8 f3d9                      	breq jmp_help	
0000e9 9160 0200                 	lds temp3, speed
0000eb e0f2
0000ec e0e1
0000ed 9141
0000ee 8150                      	ld2 distance, temp1, temp2 ; update distance
0000ef 0f56                      	add temp2, temp3
0000f0 2766                      	clr temp3
0000f1 1f46                      	adc temp1, temp3
0000f2 e0f2
0000f3 e0e1
0000f4 9341
0000f5 8350                      	st2 temp1, temp2, distance
0000f6 9140 0203                 	lds temp1, direction
0000f8 7f40                      	andi temp1, 0b11110000	;judge if go up or go down
0000f9 3040                      	cpi temp1, 0
0000fa f091                      	breq update_down
0000fb 3240                      	cpi temp1, 0b00100000
0000fc f019                      	breq update_up
0000fd 3040                      	cpi temp1, 0
                                 	;------------
0000fe 940c 0122                 	jmp N_S_W_E
                                 	
                                 	update_up:
000100 e0f2
000101 e0e9
000102 9141
000103 8150                      		ld2 pos_Z, temp1, temp2
000104 9160 0200                 		lds temp3, speed
000106 0f56                      		add temp2, temp3
000107 e0f2
000108 e0e9
000109 9341
00010a 8350                      		st2 temp1, temp2, pos_z
00010b 940c 011a                 		jmp up_down_done
                                 	update_down:
00010d e0f2
00010e e0e9
00010f 9141
000110 8150                      		ld2 pos_Z, temp1, temp2
000111 9160 0200                 		lds temp3, speed
000113 1b56                      		sub temp2, temp3
000114 e0f2
000115 e0e9
000116 9341
000117 8350                      		st2 temp1, temp2, pos_z
000118 940c 011a                 		jmp up_down_done
                                 	up_down_done:
00011a 3654                      		cpi temp2, 100
00011b f420                      		brsh crash_helper
00011c 3050                      		cpi temp2, 0
00011d f010                      		brlo crash_helper
00011e 940c 0172                 		jmp vaild_number
                                 	crash_helper:
000120 940c 0181                 		jmp crash
                                 
                                 	N_S_W_E:
000122 9140 0203                 		lds temp1, direction	;judge turn n e w s
000124 704f                      		andi temp1, 0b00001111
000125 3040                      		cpi temp1, 0
000126 f031                      		breq up_west
000127 3041                      		cpi temp1, 1
000128 f111                      		breq up_north
000129 3042                      		cpi temp1, 2
00012a f081                      		breq up_east
00012b 3043                      		cpi temp1, 3
00012c f169                      		breq up_south
                                 	up_west:
00012d e0f2
00012e e0e5
00012f 9141
000130 8150                      		ld2 pos_x, temp1, temp2
000131 9160 0200                 		lds temp3, speed
000133 1b56                      		sub temp2, temp3
000134 4040                      		sbci temp1, 0
000135 e0f2
000136 e0e5
000137 9341
000138 8350                      		st2 temp1, temp2, pos_x
000139 940c 0168                 		jmp compare_end
                                 	up_east:
00013b e0f2
00013c e0e5
00013d 9141
00013e 8150                      		ld2 pos_x, temp1, temp2
00013f b948                      		out portc,temp1
000140 9160 0200                 		lds temp3, speed
000142 0f56                      		add temp2, temp3
000143 2766                      		clr temp3
000144 1f46                      		adc temp1, temp3
000145 e0f2
000146 e0e5
000147 9341
000148 8350                      		st2 temp1, temp2, pos_x
000149 940c 0168                 		jmp compare_end
                                 
                                 	up_north:
00014b e0f2
00014c e0e7
00014d 9141
00014e 8150                      		ld2 pos_y, temp1, temp2
00014f 9160 0200                 		lds temp3, speed
000151 0f56                      		add temp2, temp3
000152 2766                      		clr temp3
000153 1f46                      		adc temp1, temp3
000154 e0f2
000155 e0e7
000156 9341
000157 8350                      		st2 temp1, temp2, pos_y
000158 940c 0168                 		jmp compare_end
                                 
                                 	up_south:
00015a e0f2
00015b e0e7
00015c 9141
00015d 8150                      		ld2 pos_y, temp1, temp2
00015e 9160 0200                 		lds temp3, speed
000160 1b56                      		sub temp2, temp3
000161 4040                      		sbci temp1, 0
000162 e0f2
000163 e0e7
000164 9341
000165 8350                      		st2 temp1, temp2, pos_y
000166 940c 0168                 		jmp compare_end
                                 
                                 	compare_end:;compare if less than 0m
000168 3050                      		cpi temp2, 0
000169 f411                      		brne compare_50
00016a 3040                      		cpi temp1, 0
00016b f0a9                      		breq crash
                                 			
                                 		compare_50:;compare if greater than 50m(500)
00016c 3042                      			cpi temp1, 2
00016d f498                      			brsh crash
                                 			
00016e 3040                      			cpi temp1, 0
00016f f011                      			breq vaild_number	
000170 3f54                      			cpi temp2, low(500)
000171 f478                      			brsh crash
                                 	vaild_number:
                                 		
000172 9140 0212                 		lds temp1, display_counter
000174 3045                      		cpi temp1, 5		; display every 0.5 second
000175 f029                      		breq display_pos
000176 9543                      		inc temp1
000177 9340 0212                 		sts display_counter, temp1
000179 940c 0180                 		jmp update_done
                                 	display_pos:
00017b 2744                      		clr temp1
00017c 9340 0212                 		sts display_counter, temp1
00017e d269                      		rcall trans_position_to_direction
00017f 9508                      		ret
                                 	update_done:
000180 9508                      		ret
                                 
                                 crash:
000181 94f8                      	cli
000182 9140 021a                 	lds temp1, landing_flag
000184 3041                      	cpi temp1, 1
000185 f009                      	breq landing_success
000186 c087                      	rjmp crash_loop
                                 
                                 landing_success:
000187 e001
000188 d18a
000189 d199                      	do_lcd_command 0b00000001
00018a e404
00018b d18e
00018c d196                      	do_lcd_data 'D'
00018d e409
00018e d18b
00018f d193                      	do_lcd_data 'I'
000190 e503
000191 d188
000192 d190                      	do_lcd_data 'S'
000193 e504
000194 d185
000195 d18d                      	do_lcd_data 'T'
000196 e401
000197 d182
000198 d18a                      	do_lcd_data 'A'
000199 e40e
00019a d17f
00019b d187                      	do_lcd_data 'N'
00019c e403
00019d d17c
00019e d184                      	do_lcd_data 'C'
00019f e405
0001a0 d179
0001a1 d181                      	do_lcd_data 'E'
0001a2 e30a
0001a3 d176
0001a4 d17e                      	do_lcd_data ':'
0001a5 e0f2
0001a6 e0e1
0001a7 9141
0001a8 8150
0001a9 2788
0001aa 2777
0001ab 2799
0001ac 3040
0001ad f441
0001ae 3654
0001af f430
0001b0 305a
0001b1 f448
0001b2 3050
0001b3 f459
0001b4 940c 01c3
0001b6 5654
0001b7 4040
0001b8 9593
0001b9 940c 01ac
0001bb 505a
0001bc 9583
0001bd 940c 01ac
0001bf 955a
0001c0 9573
0001c1 940c 01ac
0001c3 5d90
0001c4 5d80
0001c5 5d70
0001c6 2f09
0001c7 d152
0001c8 d15a
0001c9 2f08
0001ca d14f
0001cb d157                      	display_position distance
0001cc ec00
0001cd d145
0001ce d154                      	do_lcd_command 0b11000000
0001cf e404
0001d0 d149
0001d1 d151                      	do_lcd_data 'D'
0001d2 e505
0001d3 d146
0001d4 d14e                      	do_lcd_data 'U'
0001d5 e502
0001d6 d143
0001d7 d14b                      	do_lcd_data 'R'
0001d8 e401
0001d9 d140
0001da d148                      	do_lcd_data 'A'
0001db e504
0001dc d13d
0001dd d145                      	do_lcd_data 'T'
0001de e409
0001df d13a
0001e0 d142                      	do_lcd_data 'I'
0001e1 e40f
0001e2 d137
0001e3 d13f                      	do_lcd_data 'O'
0001e4 e40e
0001e5 d134
0001e6 d13c                      	do_lcd_data 'N'
0001e7 e30a
0001e8 d131
0001e9 d139                      	do_lcd_data ':'
0001ea 9140 0213                 	lds temp1, duration
0001ec 2788
0001ed 2777
0001ee 2799
0001ef 3644
0001f0 f430
0001f1 304a
0001f2 f440
0001f3 3040
0001f4 f451
0001f5 940c 0203
0001f7 5644
0001f8 9593
0001f9 940c 01ef
0001fb 504a
0001fc 9583
0001fd 940c 01ef
0001ff 954a
000200 9573
000201 940c 01ef
000203 5d90
000204 5d80
000205 5d70
000206 2f09
000207 d112
000208 d11a
000209 2f08
00020a d10f
00020b d117                      	display_time temp1
00020c 940c 020e                 	jmp crash_loop
                                 	crash_loop:
                                 .include "controll.asm"
00020e 940c 020e                 
000210 9140 0203                 	lds temp1, direction
000212 9150 0203                 	lds temp2, direction
000214 705f                      	andi temp2, 0b00001111 ;postion mask, indicate the last four bit(direction)
000215 3050                      	cpi temp2, 0
000216 f019                      	breq add_3
000217 954a                      		dec temp1
000218 940c 021b                 		jmp left_done
                                 	add_3:
00021a 5f4d                      		subi temp1, -3
                                 	left_done:
00021b 9340 0203                 		sts direction, temp1
00021d 9518                      		reti
                                 
                                 turn_right:
00021e 9140 0203                 	lds temp1, direction
000220 9150 0203                 	lds temp2, direction
000222 705f                      	andi temp2, 0b00001111 ;postion mask, indicate the last four bit(direction)
000223 3053                      	cpi temp2, 3
000224 f019                      	breq sub_3
000225 9543                      		inc temp1
000226 940c 0229                 		jmp right_done
                                 	sub_3:
000228 5043                      		subi temp1, 3
                                 	right_done:
000229 9340 0203                 		sts direction, temp1
00022b 9518                      		reti
                                 
                                 go_up:
00022c 9140 0203                 	lds temp1, direction
00022e 9150 0203                 	lds temp2, direction
000230 7f50                      	andi temp2, 0b11110000
000231 3250                      	cpi temp2, 0b00100000
000232 f009                      	breq up_done
000233 5f40                      	subi temp1, -0b00010000
                                 	up_done:
000234 9340 0203                 		sts direction, temp1
000236 9518                      		reti
                                 
                                 go_down:
000237 9140 0203                 	lds temp1, direction
000239 9150 0203                 	lds temp2, direction
00023b 7f50                      	andi temp2, 0b11110000
00023c 3050                      	cpi temp2, 0b00000000
00023d f009                      	breq down_done
00023e 5140                      	subi temp1, 0b00010000
                                 	down_done:
00023f 9340 0203                 		sts direction, temp1
000241 9518                      		reti
                                 
                                 speed_up:
000242 94f8                      	cli
000243 9140 0217                 	lds temp1, speed_flag		;use flag to ensure only speed will change 1m/s each time
000245 3040                      	cpi temp1, 0
000246 f0e9                      	breq speed_nothing
000247 9140 0200                 	lds temp1, speed
000249 3044                      	cpi temp1, 4
00024a f0c9                      	breq speed_nothing
00024b 9543                      	inc temp1
00024c 9340 0200                 	sts speed, temp1
00024e 2744                      	clr temp1
00024f 9340 0217                 	sts speed_flag, temp1
000251 9478                      	sei
000252 9518                      	reti
                                 
                                 speed_down:
000253 94f8                      	cli
000254 9140 0217                 	lds temp1, speed_flag
000256 3040                      	cpi temp1, 0
000257 f061                      	breq speed_nothing
000258 9140 0200                 	lds temp1, speed
00025a 3040                      	cpi temp1, 0
00025b f041                      	breq speed_nothing
00025c 954a                      	dec temp1
00025d 9340 0200                 	sts speed, temp1
00025f 2744                      	clr temp1
000260 9340 0217                 	sts speed_flag, temp1
000262 9478                      	sei
000263 9518                      	reti
                                 
                                 speed_nothing:
000264 9478                      	sei
000265 9518                      	reti
                                 
                                 auto_poilt:
000266 e001
000267 d0ab
000268 d0ba                      	do_lcd_command 0b00000001
000269 e404
00026a d0af
00026b d0b7                      	do_lcd_data 'D'
00026c e409
00026d d0ac
00026e d0b4                      	do_lcd_data 'I'
00026f e503
000270 d0a9
000271 d0b1                      	do_lcd_data 'S'
000272 e504
000273 d0a6
000274 d0ae                      	do_lcd_data 'T'
000275 e409
000276 d0a3
000277 d0ab                      	do_lcd_data 'I'
000278 e40e
000279 d0a0
00027a d0a8                      	do_lcd_data 'N'
00027b e401
00027c d09d
00027d d0a5                      	do_lcd_data 'A'
00027e e504
00027f d09a
000280 d0a2                      	do_lcd_data 'T'
000281 e409
000282 d097
000283 d09f                      	do_lcd_data 'I'
000284 e40f
000285 d094
000286 d09c                      	do_lcd_data 'O'
000287 e40e
000288 d091
000289 d099                      	do_lcd_data 'N'
00028a e30a
00028b d08e
00028c d096                      	do_lcd_data ':'
00028d ec00
00028e d084
00028f d093                      	do_lcd_command 0b11000000
000290 e0eb                      	ldi r30, low(dst_x)	;passing address of dst_x
000291 e0f2                      	ldi r31, high(dst_x)
000292 d00a                      	rcall get_dst_num
000293 e0ed                      	ldi r30, low(dst_y)
000294 e0f2                      	ldi r31, high(dst_y)
000295 d007                      	rcall get_dst_num
000296 e0ef                      	ldi r30, low(dst_z)
000297 e0f2                      	ldi r31, high(dst_z)
000298 d004                      	rcall get_dst_num
000299 e041                      	ldi temp1, 1
00029a 9340 021c                 	sts auto_poilt_flag, temp1
00029c 9508                      	ret
                                 
                                 get_dst_num:
00029d 93ef                      	push r30		;store dst_x low bit address
00029e 93ff                      	push r31		;high bits
                                 
00029f d0e3                      	rcall have_got_key
0002a0 324f                      	cpi temp1, '0'-1
0002a1 f3d8                      	brlo get_dst_num
0002a2 3345                      	cpi temp1, '5'
0002a3 f7c8                      	brsh get_dst_num
0002a4 2f04
0002a5 d074
0002a6 d07c                      	do_lcd_data_reg temp1
                                 
0002a7 5340                      	subi temp1, '0'
0002a8 e05a                      	ldi temp2, 10
0002a9 9f45                      	mul temp1, temp2
0002aa 2d40                      	mov temp1, r0
0002ab 934f                      	push temp1
                                 	get_dst_one:
0002ac d0d6                      		rcall have_got_key
0002ad 324f                      		cpi temp1, '0'-1
0002ae f3e8                      		brlo get_dst_one
0002af 334a                      		cpi temp1, '9'+1
0002b0 f7d8                      		brsh get_dst_one
0002b1 2f04
0002b2 d067
0002b3 d06f                      		do_lcd_data_reg temp1
0002b4 916f                      		pop temp3
0002b5 5340                      		subi temp1, '0'
0002b6 0f64                      		add temp3, temp1
0002b7 e04a                      		ldi temp1, 10
0002b8 9f46                      		mul temp1, temp3
0002b9 91df                      		pop r29		;get address for dst_..
0002ba 91cf                      		pop r28
0002bb 8210                      		st Z, r1
0002bc 8201                      		std Z+1, r0
0002bd e200
0002be d05b
0002bf d063                      		do_lcd_data ' '
0002c0 9508                      		ret
                                 go_dst_start:
0002c1 9160 021c                 	lds temp3, auto_poilt_flag
0002c3 3061                      	cpi temp3, 1
0002c4 f011                      	breq go_dst_start1
0002c5 940c 030c                 	jmp return
                                 	go_dst_start1:
0002c7 e041                      		ldi temp1, 1
0002c8 9340 0200                 		sts speed, temp1
0002ca e0f2
0002cb e0e5
0002cc 9301
0002cd 8310                      		st2 r16, r17, pos_x
0002ce e0f2
0002cf e0eb
0002d0 9341
0002d1 8350                      		st2 temp1, temp2, dst_x
0002d2 1715                      		cp r17, temp2
0002d3 0704                      		cpc r16, temp1
0002d4 f019                      		breq go_dst_mid
0002d5 f110                      		brlo auto_west
0002d6 940c 02f4                 		jmp auto_east
                                 go_dst_mid:
0002d8 e0f2
0002d9 e0e7
0002da 9301
0002db 8310                      	st2 r16, r17, pos_y
0002dc e0f2
0002dd e0ed
0002de 9341
0002df 8350                      	st2 temp1, temp2, dst_y
0002e0 1715                      	cp r17, temp2
0002e1 0704                      	cpc r16, temp1
0002e2 f019                      	breq go_dst_end
0002e3 f0c0                      	brlo auto_south
0002e4 940c 0300                 	jmp auto_north
                                 go_dst_end:
0002e6 e0f2
0002e7 e0e9
0002e8 9301
0002e9 8310                      	st2 r16, r17, pos_z
0002ea e0f2
0002eb e0ef
0002ec 9341
0002ed 8350                      	st2 temp1, temp2, dst_z
0002ee 0715                      	cpc r17, temp2
0002ef ef4f                      	ser temp1
                                 	;out portc, temp1
0002f0 f0d9                      	breq return
0002f1 f0b0                      	brlo auto_down
0002f2 940c 0304                 	jmp auto_up
                                 
                                 auto_east:
0002f4 e142                      	ldi temp1, 0b00010010
0002f5 9340 0203                 	sts direction, temp1
0002f7 9508                      	ret
                                 auto_west:
0002f8 e140                      	ldi temp1, 0b00010000
0002f9 9340 0203                 	sts direction, temp1
0002fb 9508                      	ret
                                 auto_south:
0002fc e141                      	ldi temp1, 0b00010001
0002fd 9340 0203                 	sts direction, temp1
0002ff 9508                      	ret
                                 auto_north:
000300 e143                      	ldi temp1, 0b00010011
000301 9340 0203                 	sts direction, temp1
000303 9508                      	ret
                                 auto_up:
000304 e243                      	ldi temp1, 0b00100011
000305 9340 0203                 	sts direction, temp1
000307 9508                      	ret
                                 auto_down:
000308 e043                      	ldi temp1, 0b00000011
000309 9340 0203                 	sts direction, temp1
00030b 9508                      	ret
                                 return:
00030c 9508                      	ret
                                 
                                 auto_poilt_jump:
00030d 940c 0266                 	jmp auto_poilt
                                 start_moodle:
00030f d073                      	rcall have_got_key
000310 3441                      	cpi temp1, 'A'
000311 f3d9                      	breq auto_poilt_jump
000312 9508                      	ret
                                 
                                 .include "lcd.asm"
                                 
                                 ; store lcd commond
                                 ; Send a command to the LCD (r16)
                                 
                                 lcd_command:
000313 bb01                      	STORE LCD_DATA_PORT, r16
000314 d01f                      	rcall sleep_1ms
000315 9a16                      	lcd_set LCD_E
000316 d01d                      	rcall sleep_1ms
000317 9816                      	lcd_clr LCD_E
000318 d01b                      	rcall sleep_1ms
000319 9508                      	ret
                                 
                                 lcd_data:
00031a bb01                      	STORE LCD_DATA_PORT, r16
00031b 9a17                      	lcd_set LCD_RS
00031c d017                      	rcall sleep_1ms
00031d 9a16                      	lcd_set LCD_E
00031e d015                      	rcall sleep_1ms
00031f 9816                      	lcd_clr LCD_E
000320 d013                      	rcall sleep_1ms
000321 9817                      	lcd_clr LCD_RS
000322 9508                      	ret
                                 lcd_wait:
000323 930f                      	push r16
000324 2700                      	clr r16
000325 bb00                      	STORE LCD_DATA_DDR, r16
000326 bb01                      	STORE LCD_DATA_PORT, r16
000327 9a15                      	lcd_set LCD_RW
                                 lcd_wait_loop:
000328 d00b                      	rcall sleep_1ms
000329 9a16                      	lcd_set LCD_E
00032a d009                      	rcall sleep_1ms
00032b b10f                      	LOAD r16, LCD_DATA_PIN
00032c 9816                      	lcd_clr LCD_E
00032d fd07                      	sbrc r16, 7
00032e cff9                      	rjmp lcd_wait_loop
00032f 9815                      	lcd_clr LCD_RW
000330 ef0f                      	ser r16
000331 bb00                      	STORE LCD_DATA_DDR, r16
000332 910f                      	pop r16
000333 9508                      	ret
                                 
                                 .equ F_CPU = 16000000
                                 .equ DELAY_1MS = F_CPU / 4 / 1000 - 4
                                 ; 4 cycles per iteration - setup/call-return overhead
                                 
                                 sleep_1ms:
000334 938f                      	push r24
000335 939f                      	push r25
000336 e09f                      	ldi r25, high(DELAY_1MS)
000337 e98c                      	ldi r24, low(DELAY_1MS)
                                 delayloop_1ms:
000338 9701                      	sbiw r25:r24, 1
000339 f7f1                      	brne delayloop_1ms
00033a 919f                      	pop r25
00033b 918f                      	pop r24
00033c 9508                      	ret
                                 
                                 sleep_5ms:
00033d dff6                      	rcall sleep_1ms
00033e dff5                      	rcall sleep_1ms
00033f dff4                      	rcall sleep_1ms
000340 dff3                      	rcall sleep_1ms
000341 dff2                      	rcall sleep_1ms
000342 9508                      	ret
                                 
                                 
                                 .include "keypad.asm"
                                 
                                 ;----copy form http://webapps.cse.unsw.edu.au/webcms2/course/index.php?cid=2446&color=teal ;
                                 ;writer by professor in COMP9032
                                 ;modify by Feng Yu
                                 ; The program gets input from keypad and displays its ascii value on LEDs
                                 ; Port F is used for keypad, high 4 bits for column selection, low four bits for reading rows
                                 ; Port C is used to display the ASCII value of a key.
                                 ; Date: Aug 10, 2015
                                 
                                 get_key:	
000343 ef40                      		ldi temp1, PORTFDIR			; columns are outputs, rows are inputs
000344 9340 010a                 		sts	DDRL, temp1
                                 	
                                 	keypad_main:
000346 ee3f                      		ldi cmask, INITCOLMASK		; initial column mask
000347 2711                      		clr	col						; initial column
                                 	colloop:
000348 3014                      		cpi col, 4
000349 f1b1                      		breq none_press
00034a 9330 010b                 		sts	PORTL, cmask				; set column to mask value (one column off)
00034c ef4f                      		ldi temp1, 0xFF
                                 	key_pad_delay:
00034d 954a                      		dec temp1
00034e f7f1                      		brne key_pad_delay
00034f 9140 0109                 		lds	temp1, PINL				; read PORTL
000351 704f                      		andi temp1, ROWMASK
000352 304f                      		cpi temp1, 0xF				; check if any rows are on
000353 f059                      		breq nextcol
                                 									; if yes, find which row is on
000354 e021                      		ldi rmask, INITROWMASK		; initialise row check
000355 2700                      		clr	row						; initial row
                                 
                                 	rowloop:
000356 3004                      		cpi row, 4
000357 f039                      		breq nextcol
000358 2f54                      		mov temp2, temp1
000359 2352                      		and temp2, rmask				; check masked bit
00035a f049                      		breq convert 				; if bit is clear, convert the bitcode
00035b 9503                      		inc row						; else move to the next row
00035c 0f22                      		lsl rmask					; shift the mask to the next bit
00035d 940c 0356                 		jmp rowloop
                                 
                                 	nextcol:
00035f 0f33                      		lsl cmask					; else get new mask by shifting and 
000360 9533                      		inc cmask
000361 9513                      		inc col						; increment column value
000362 940c 0348                 		jmp colloop					; and check the next column
                                 
                                 	convert:
000364 3013                      		cpi col, 3					; if column is 3 we have a letter
000365 f049                      		breq letters				
000366 3003                      		cpi row, 3					; if row is 3 we have a symbol or 0
000367 f059                      		breq symbols
                                 
000368 2f40                      		mov temp1, row				; otherwise we have a number in 1-9
000369 0f44                      		lsl temp1
00036a 0f40                      		add temp1, row				; temp1 = row * 3
00036b 0f41                      		add temp1, col				; add the column address to get the value
00036c 5c4f                      		subi temp1, -'1'			; add the value of character '0'
00036d 940c 0382                 		jmp convert_end
                                 
                                 	letters:
00036f e441                      		ldi temp1, 'A'
000370 0f40                      		add temp1, row				; increment the character 'A' by the row value
000371 940c 0382                 		jmp convert_end
                                 
                                 	symbols:
000373 3010                      		cpi col, 0					; check if we have a star
000374 f029                      		breq star
000375 3011                      		cpi col, 1					; or if we have zero
000376 f031                      		breq zero					
000377 e243                      		ldi temp1, '#'				; if not we have hash
000378 940c 0382                 		jmp convert_end
                                 	star:
00037a e24a                      		ldi temp1, '*'				; set to star
00037b 940c 0382                 		jmp convert_end
                                 	zero:
00037d e340                      		ldi temp1, '0'				; set to zero
00037e 940c 0382                 		jmp convert_end
                                 	
                                 	none_press:
000380 e244                      		ldi temp1, '$'
000381 9508                      		ret	
                                 	convert_end:
000382 9508                      		ret
                                 
                                 have_got_key:	;make sure have press button
000383 dfbf                      	rcall get_key
000384 3244                      	cpi temp1, '$'
000385 f411                      	brne store_key
000386 940c 0383                 	jmp have_got_key
                                 	store_key:
000388 9340 021b                 		sts key_button, temp1
00038a dfb8                      		rcall get_key
00038b 3244                      		cpi temp1, '$'
00038c f7d9                      		brne store_key
00038d 9140 021b                 		lds temp1, key_button
00038f 9508                      		ret
                                 
                                 do_nothing_helper:
000390 940c 03e7                 	jmp do_nothing
                                 
                                 run_follow_keypad_conduct:	
000392 9160 021c                 	lds temp3, auto_poilt_flag	;if autopoilt model, do nothing
000394 3061                      	cpi temp3, 1
000395 f3d1                      	breq do_nothing_helper
000396 dfac                      	rcall get_key
000397 9150 0204                 	lds temp2, conduct
000399 1745                      	cp temp1, temp2
00039a f3a9                      	breq do_nothing_helper
00039b 9340 0204                 	sts conduct, temp1
00039d 3244                      	cpi temp1, '$'
00039e f389                      	breq do_nothing_helper
00039f e050                      	ldi temp2, 0			; disable landing modle
0003a0 9350 021a                 	sts landing_flag, temp2
0003a2 324a                      	cpi temp1, '*'
0003a3 f061                      	breq hover_control
0003a4 3243                      	cpi temp1, '#'
0003a5 f0f1                      	breq take_off_judge
0003a6 3342                      	cpi temp1, '2'
0003a7 f199                      	breq up
0003a8 3348                      	cpi temp1, '8'
0003a9 f1a1                      	breq down
0003aa 3344                      	cpi temp1, '4'
0003ab f1a9                      	breq left
0003ac 3346                      	cpi temp1, '6'
0003ad f1b1                      	breq right
0003ae 940c 03e7                 	jmp do_nothing
                                 	hover_control:
0003b0 9160 0219                 		lds temp3, hover_speed
0003b2 3060                      		cpi temp3, 0
0003b3 f039                      		breq start_hover
0003b4 9360 0200                 		sts speed, temp3
0003b6 2755                      		clr temp2
0003b7 9350 0219                 		sts hover_speed, temp2
0003b9 d02e                      		rcall trans_position_to_direction
0003ba 9518                      		reti
                                 
                                 		start_hover:
0003bb 9160 0200                 			lds temp3, speed
0003bd 9360 0219                 			sts hover_speed, temp3
0003bf 2766                      			clr temp3
0003c0 9360 0200                 			sts speed, temp3
0003c2 d025                      			rcall trans_position_to_direction
0003c3 9518                      			reti  
                                 
                                 	take_off_judge:
0003c4 e061                      		ldi temp3, 1
0003c5 9360 0200                 		sts speed, temp3
0003c7 9150 0218                 		lds temp2, take_off_flag
0003c9 3050                      		cpi temp2, 0
0003ca f051                      		breq up1
0003cb e050                      		ldi temp2, 0
0003cc 9350 0218                 		sts take_off_flag, temp2 
0003ce de68                      		rcall go_down
0003cf de67                      		rcall go_down
0003d0 e051                      		ldi temp2, 1
0003d1 9350 021a                 		sts landing_flag, temp2		; enale landing modle
0003d3 d014                      		rcall trans_position_to_direction
0003d4 9518                      		reti
                                 	
                                 	up1:
0003d5 e051                      		ldi temp2, 1
0003d6 9350 0218                 		sts take_off_flag, temp2
0003d8 de53                      		rcall go_up
0003d9 d00e                      		rcall trans_position_to_direction
0003da 9518                      		reti
                                 
                                 	up:
0003db de50                      		rcall go_up
0003dc d00b                      		rcall trans_position_to_direction
0003dd 9518                      		reti
                                 	down:
0003de de58                      		rcall go_down
0003df d008                      		rcall trans_position_to_direction
0003e0 9518                      		reti
                                 	left:
0003e1 de2e                      		rcall turn_left
0003e2 d005                      		rcall trans_position_to_direction
0003e3 9518                      		reti
                                 	right:
0003e4 de39                      		rcall turn_right
0003e5 d002                      		rcall trans_position_to_direction	
0003e6 9518                      		reti
                                 	do_nothing:
0003e7 9518                      		reti
                                 
                                 
                                 trans_position_to_direction:
0003e8 e001
0003e9 df29
0003ea df38
0003eb e200
0003ec df2d
0003ed df35
0003ee e200
0003ef df2a
0003f0 df32
0003f1 e200
0003f2 df27
0003f3 df2f
0003f4 e500
0003f5 df24
0003f6 df2c
0003f7 e40f
0003f8 df21
0003f9 df29
0003fa e503
0003fb df1e
0003fc df26
0003fd e200
0003fe df1b
0003ff df23
000400 e200
000401 df18
000402 df20
000403 e200
000404 df15
000405 df1d
000406 e404
000407 df12
000408 df1a
000409 e409
00040a df0f
00040b df17
00040c e502
00040d df0c
00040e df14
00040f e200
000410 df09
000411 df11
000412 e503
000413 df06
000414 df0e
000415 e500
000416 df03
000417 df0b
000418 e404
000419 df00
00041a df08
00041b ec00
00041c def6
00041d df05                      	first_line
00041e e0f2
00041f e0e5
000420 9141
000421 8150
000422 2788
000423 2777
000424 2799
000425 3040
000426 f441
000427 3654
000428 f430
000429 305a
00042a f448
00042b 3050
00042c f459
00042d 940c 043c
00042f 5654
000430 4040
000431 9593
000432 940c 0425
000434 505a
000435 9583
000436 940c 0425
000438 955a
000439 9573
00043a 940c 0425
00043c 5d90
00043d 5d80
00043e 5d70
00043f 2f09
000440 ded9
000441 dee1
000442 2f08
000443 ded6
000444 dede                      	display_position pos_x
000445 e200
000446 ded3
000447 dedb                      	do_lcd_data ' '
000448 e0f2
000449 e0e7
00044a 9141
00044b 8150
00044c 2788
00044d 2777
00044e 2799
00044f 3040
000450 f441
000451 3654
000452 f430
000453 305a
000454 f448
000455 3050
000456 f459
000457 940c 0466
000459 5654
00045a 4040
00045b 9593
00045c 940c 044f
00045e 505a
00045f 9583
000460 940c 044f
000462 955a
000463 9573
000464 940c 044f
000466 5d90
000467 5d80
000468 5d70
000469 2f09
00046a deaf
00046b deb7
00046c 2f08
00046d deac
00046e deb4                      	display_position pos_y
00046f e200
000470 dea9
000471 deb1                      	do_lcd_data ' '
000472 e0f2
000473 e0e9
000474 9141
000475 8150
000476 2788
000477 2777
000478 2799
000479 3040
00047a f441
00047b 3654
00047c f430
00047d 305a
00047e f448
00047f 3050
000480 f459
000481 940c 0490
000483 5654
000484 4040
000485 9593
000486 940c 0479
000488 505a
000489 9583
00048a 940c 0479
00048c 955a
00048d 9573
00048e 940c 0479
000490 5d90
000491 5d80
000492 5d70
000493 2f09
000494 de85
000495 de8d
000496 2f08
000497 de82
000498 de8a                      	display_position pos_z
000499 e200
00049a de7f
00049b de87                      	do_lcd_data ' '
00049c e200
00049d de7c
00049e de84                      	do_lcd_data ' '
                                 
00049f 9140 0203                 	lds temp1, direction
0004a1 7f40                      	andi temp1, 0b11110000
0004a2 3040                      	cpi temp1, 0
0004a3 f1b9                      	breq display_down
0004a4 3240                      	cpi temp1, 0b00100000
0004a5 f169                      	breq display_up
0004a6 9140 0203                 	lds temp1, direction
0004a8 704f                      	andi temp1, 0b00001111
0004a9 3040                      	cpi temp1, 0
0004aa f081                      	breq west
0004ab 3041                      	cpi temp1, 1
0004ac f0b1                      	breq north
0004ad 3042                      	cpi temp1, 2
0004ae f021                      	breq east
0004af 3043                      	cpi temp1, 3
0004b0 f0d1                      	breq south
                                 	;out portc, temp1
0004b1 940c 04e4                 	jmp trans_end
                                 	east:
0004b3 e405
0004b4 de65
0004b5 de6d                      		do_lcd_data 'E'
0004b6 e200
0004b7 de62
0004b8 de6a                      		do_lcd_data ' '
0004b9 940c 04e4                 		jmp trans_end
                                 	west:
0004bb e507
0004bc de5d
0004bd de65                      		do_lcd_data 'W'
0004be e200
0004bf de5a
0004c0 de62                      		do_lcd_data ' '
0004c1 940c 04e4                 		jmp trans_end
                                 	north:
0004c3 e40e
0004c4 de55
0004c5 de5d                      		do_lcd_data 'N'
0004c6 e200
0004c7 de52
0004c8 de5a                      		do_lcd_data ' '
0004c9 940c 04e4                 		jmp trans_end
                                 	south:
0004cb e503
0004cc de4d
0004cd de55                      		do_lcd_data 'S'
0004ce e200
0004cf de4a
0004d0 de52                      		do_lcd_data ' '
0004d1 940c 04e4                 		jmp trans_end
                                 	display_up:
0004d3 e505
0004d4 de45
0004d5 de4d                      		do_lcd_data 'U'
0004d6 e200
0004d7 de42
0004d8 de4a                      		do_lcd_data ' '
0004d9 940c 04e4                 		jmp trans_end
                                 	display_down:
0004db e404
0004dc de3d
0004dd de45                      		do_lcd_data 'D'
0004de e200
0004df de3a
0004e0 de42                      		do_lcd_data ' '
0004e1 940c 04e4                 		jmp trans_end
                                 	trans_nothing:
0004e3 9508                      		ret
                                 	trans_end:
0004e4 e200
0004e5 de34
0004e6 de3c                      		do_lcd_data ' '
0004e7 e200
0004e8 de31
0004e9 de39                      		do_lcd_data ' '
0004ea 9140 0200                 		lds temp1, speed
0004ec 5d40                      		subi temp1, -'0'
0004ed 2f04
0004ee de2b
0004ef de33                      		do_lcd_data_reg temp1
0004f0 9508                      		ret
                                 
                                 
                                 
                                 	
                                 		
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :   0 y  :   0 z  :  64 r0 :   2 r1 :   1 r2 :   0 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 134 r17:  13 r18:   3 r19:   4 r20: 223 
r21:  99 r22:  36 r23:  15 r24:  31 r25:  24 r26:   0 r27:   0 r28:   1 
r29:   1 r30:  35 r31:  35 
Registers used: 17 out of 35 (48.6%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   3 add   :   8 adiw  :   0 and   :   1 
andi  :   9 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  49 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 brlt  :   0 brmi  :   0 
brne  :  15 brpl  :   0 brsh  :  15 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   5 cbr   :   0 
clc   :   0 clh   :   0 cli   :   5 cln   :   0 clr   :  32 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 cpc   :   3 
cpi   :  75 cpse  :   0 dec   :   8 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :  23 jmp   :  62 ld    :  22 ldd   :   0 ldi   : 197 
lds   :  38 lpm   :   0 lsl   :   3 lsr   :   0 mov   :  16 movw  :   0 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  17 pop   :   9 push  :   8 rcall : 246 ret   :  22 
reti  :  18 rjmp  :   5 rol   :   0 ror   :   0 sbc   :   0 sbci  :   6 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   1 sbr   :   0 sbrc  :   1 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   7 sen   :   0 ser   :   4 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  41 std   :   1 sts   :  48 sub   :   3 subi  :  33 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 42 out of 116 (36.2%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009e2   2450      0   2450  262144   0.9%
[.dseg] 0x000200 0x00021d      0     29     29    8192   0.4%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 0 warnings
